{"QandA":
[

["What is scrum?",
"An agile software developmeht methodology based around repeated two-week(ish) 'sprints', each one of which involves planning, designing, building and testing"],

["What is a (singular) scrum?",
"A standup meeting held during scrum development cycles"],

["What is product backlog?",
"A todo list of jobs that need doing in scrum development"],

["What is product owner?",
"A term in scrum development for the client or their representative. They are part of the team."],

["In 'scrum' development process, what is the project owner?",
"Also called the project manager. In additon to prioritizing developments and overseeing the overall vision, they are the first point of call with stakeholders"],

["In 'scrum' development process, who is the scrum master?",
"Also called the delivery manager. They oversee the team and make sure it's working smoothly. This can sometimes be a rotating role through the cycle of development, and may be irrelevant in a high performing team"],

["What is extreme development?",
"An agile software development methodology used to prevent coders from writing complex code that they alone are responsible for in heroic bursts"],

["What are the five principles of extreme programming?",
"(1) SIMPLE DESIGN - find the simplest way to code features, \n(2) SUSTAINABLE PACE - work at a sustainable pace, \n(3) CODING STANDARDS - teams follow an agreed-upon standard and format, where no individual uses techniques the others are not aware of, \n(4) COLLECTIVE OWNERSHIP, where everyone owns all code produced, \n(5) WHOLE TEAM APPROACH, where everyone is involved in decisions"],

["Name five practices that form part of extreme programming",
"(1) Pair programming, \n(2) Test Driven Coding, where you build the testing process into the day-to-day codewriting rather than leaving testing to the end, \n(3) Small releases - create a minimum viable product and then add small features, \n(4) Continuous integration - keep integrating features one by one and make sure each works, \n(5) refactoring - restructure when things get messy"],

["What is pair programming?",
"Two people divide into helm and tactician. The helm writes the code and the tactician thinks about the implications and spots areas for refactoring. Works if the pair can communicate well; teams should regularly swap even functional pairs to facilitate cross-team communication. The pair does not own this code and others can change it. All code is reviewed as it is written"],

["Previous studies have shown pair programming to have what effects on the overall development?",
"Improves coder retention and code quality at the expense of a 15% increase in developer time costs. Slight increase in code output (77 lines per month for each individual, 175 for a single pair). Improves the technical skill of coders."],

["What is test-driven development?",
"Rather than write code and then test it, think of the tests your code has to pass for you to be sure that it works. This is a wholesale shift in focus - think about what tests your code needs to pass"],

["What are the benefits of test-driven development?",
"Since you are writing code to pass tests, you have no code that is not tested. It also helps debugging and documentation, by highlighting individual areas of error"],

["What is Kanban?",
"Emerges from the japanese concept of just-in-time manufacturing, where you don't store components you might need in the future but instead bring them to the production line just in time. Kanban is a way to manage and schedule this by dividing the todo list into to do, doing, and done (sometimes there are extra columns as needed, ie - backlog, being verified, awaiting integration."],

["What are swimlanes?",
"A feature of more complex Kanban boards - horizontal lines that cut across the columns, that usually divide the board up into work for seperate teams or subteams."],

["When can you use a waterfall approach?",
"When you have clear requirements at the outset - for example, if your software is digitizing an existing paper-based protocol. Most projects would be better served by agile"],

["When can you use an agile approach?",
"When you do not have enough information at the outset to say with confidence that you will be able to complete each Waterfall stage before moving to the next"],

["What are the five stages of waterfall development and how do they link up?",
"Analyse, design, code, test, deploy. You complete one before moving to the next."],

["How can you conceptualize an agile development model in terms of the five stages of waterfall development?",
"Do all five over and over again, iteratively, without committing to a final design in advance"],

["What are the four key principles of agile software development, as set out in the 2001 Utah manifesto?",
"(1) Individuals and interaction over processes and tools \n(2) working software over comprehensive documentation \n(3) customer collaboration over contract negotiation \n(4) responding to change over following a plan"],

["What should the delivery schedule be from client to developer in agile development?",
"There should be regular demonstrations of working (if not complete) code. If possible, developers should talk to clients daily."],

["Agile development runs on twelve principles, five of which are about meeting client needs and six are about meeting coders. What are the client-side principles?",
"(1) Highest priority is satisfying the client through good work delivered to time, \n(2) Embrace change, even late in the cycle, \n(3) Collaborate daily with the client, \n(4) use face-to-face communication, \n(5) frequently deliver/demonstrate working software"],

["Agile development runs on twelve principles, seven of which are about meeting client needs and six are about meeting coders. What are the developer-side principles?",
"(1) Work at a steady, sustainable pace without heroic efforts, \n(2) Rely on self-organizing teams, \n(3) Teams reflect regularly on their performance, \n(4) Measure progress in quantity of working code produced, \n(5) continuous attention to technical excellence, \n(6) Minimize unneccessary work, \n(7) Build teams around motivated individuals."],

["Name four problems with agile",
"(1) CONTRACTS - it's hard to draw up contracts, and this can be an unneccessary limitation if you are reasonably sure you know the requirements at the start \n(2) GREENFIELD VS BROWNFIELD - good for greenfield development, not brownfield \n(3) TEAM SIZE - works great for small co-located teams, harder for larger more geographically spread teams, \n(4) EMBODIED KNOWLEDGE - with less documentation, code is more vulnerable to coder absence, permanent or temporary"],

["What is the difference between green-field and brown-field development?",
"It's an informal term derived from housing; green-field development is writing wholly new code while brown-field development is overhauling/maintaining legacy code"],

["START OF REQUIREMENTS ENGINEERING - what are system requirements?",
"Requirements of your system when perceived from the outside as a black box. You gather these from your clients as part of requirements engineering, althougn ot always to the letter of what they say; their requirements may be unrealistic or not reflective of what they seem to want"],

["System requirements include functional and non-functional requirements. What are the functional requirements?",
"Requirements that say what a system is supposed to do, for example - what the system should do in particular sitautions or in response to particular inputs; services the system should provide, and things it should not do"],

["System reuirements include a functional and non-functional requirements. What are the non-functional requirements?",
"Constraints on the services offered by a system; these usually pertain to the whole system and not just individual features. Basically, this is stuff about the quality or nature of the services rather than the services itself."],

["What are the five groups of people involved in requirements engineering?",
"(1) customers, who may or may not know what they want; \n(2) business analysts (aka 'Requirements Engineer') which translates customer requirements into formal actionable requirements. \n(3) Sysadmins, who further advise the business analyist onto how new software fits into existing infrastructure. \n(4) Testers, who test that the software works as specified. \n(5) Developers."],

["What are the three roles requirements serve?",
"(1) Instructions \n(2) A communication mechanism with clients \n(3)Acceptance criteria - make sure they're precise and measurable"],

["What distinguishes requirements engineering in agile from in other methods?",
"There is no one single person who writes and owns requirements; they are continually revised by the team, including the product owner"],

["What are the five stages of requirements analysis?",
"(1) Identify stakeholders \n(2)Identify top level user needs, ie as NFRs or epics/initiatives \n(3) Break these down into individual stories. \n(4) Specify atomic requirements (ie, the formal specification). \n(5) Some UML"],

["What are the three layers of the onion model of stakeholder categorization, radiating outwards (not including the product in the centre?",
"(1) The system \n(2) The containing system \n(3) The wider environment"],

["In the onion model of stakeholder categorization, what 3 roles are in the inner layer?",
"(1) Normal Operator - the person who runs the software \n(2)Maintenance operator - fixes the software \n(3) Operataional support - sells the services of the software, or puts it to the use of the business's customers"],

["In the onion model of stakeholder categorization, what 3 roles are in the middle layer?",
"(1) Functional beneficiary - customers of the business using the software at no cost to them \n(2) Purchaser - users of the software who pay for it \n(3) Interfacing System Owner - users or businesses that interface the customer-side aspects of the software with other software"],

["In the onion model of stakeholder categorization, what 8 roles are in the outer layer?",
"(1) The public \n(2) Regulators \n(3) Negative stakeholders - ie, a man-in-the-middle attacker trying to misue banking software \n(4) Sponsor \n(5) Champion \n(6) Politicans \n(7) Functional beneficiaries \n(8) developer"],

["How might you go about identifying stakeholders? Name three methods",
"(1) Ask your clients \n(2) Review existing documentation \n(3) exercises like the Onion Model"],

["What are surrogate stakeholders?",
"Intangible stakeholders - for example, you'll want to get your software cleared with legal, HR, DEI (lol) teams in your client business."],

["What are epics?",
"In agile development, epics are high-level requirements that must be broken down into smaller tasks. They take multiple sprints."],

["In agile development, there are three levels of requirements. A requirement at each level is broken down into several requirements from the level below. What are the levels?",
"(1) Initiatives, likely involving multipe teams - 'improve accessibility' \n(2) Epics, likely involving multiple sprints - 'Enhance visual accessibilty' \n(3) User Stories, involving a single sprint - 'As a dyslexic person, I want text in comic sans so I can read more easily"],

["What are user stories?",
"It's a template - 'as a <type of user> I want to <some goal> for <some reason>'. Each one has acceptance criteria."],

["What is the INVEST acronym for good user-stories?",
"I - independent; you can put them into sprits one at a time and implement them independently of each other \nN - negotiable; open to change and discussion \nV - valuable; delivers clear value to the user \nE - estimatable; you can estimate how much time/effort it will take \nS - small; you can do it in a single two-week sprint\nT - testable"],

["What four features should good user story acceptance crtieria have?",
"(1) - easy to underestand and ambiguous \n(2) testable \n(3) measurable via a formal quantiative or qualitative method \n(4) Atomic, each criteria can be checked by itself"],

["What is the Moscow Method",
"A slightly warped acronym - Must have, could have, could have, won't have. It's a way of categorizing features of software you're developing, as part of agile development."]

]
}