{"QandA":
[
    
["What are system requirements?",
"Requirements of your system when perceived from the outside as a black box. You gather these from your clients as part of requirements engineering, althougn ot always to the letter of what they say; their requirements may be unrealistic or not reflective of what they seem to want"],

["System requirements include functional and non-functional requirements. What are the functional requirements?",
"Requirements that say what a system is supposed to do, for example - what the system should do in particular sitautions or in response to particular inputs; services the system should provide, and things it should not do"],

["System requirements include functional and non-functional requirements. What are the non-functional requirements?",
"Constraints on the services offered by a system; these usually pertain to the whole system and not just individual features. Basically, this is stuff about the quality or nature of the services rather than the services itself."],

["What are the five groups of people involved in requirements engineering?",
"(1) customers, who may or may not know what they want; \n(2) business analysts (aka 'Requirements Engineer') which translates customer requirements into formal actionable requirements. \n(3) Sysadmins, who further advise the business analyist onto how new software fits into existing infrastructure. \n(4) Testers, who test that the software works as specified. \n(5) Developers."],

["What are the three roles requirements serve?",
"(1) Instructions \n(2) A communication mechanism with clients \n(3)Acceptance criteria - make sure they're precise and measurable"],

["What distinguishes requirements engineering in agile from in other methods?",
"There is no one single person who writes and owns requirements; they are continually revised by the team, including the product owner"],

["What are the five stages of requirements analysis?",
"(1) Identify stakeholders \n(2)Identify top level user needs, ie as NFRs or epics/initiatives \n(3) Break these down into individual stories. \n(4) Specify atomic requirements (ie, the formal specification). \n(5) Some UML"],

["What are the three layers of the onion model of stakeholder categorization, radiating outwards (not including the product in the centre?",
"(1) The system \n(2) The containing system \n(3) The wider environment"],

["In the onion model of stakeholder categorization, what 3 roles are in the inner layer?",
"(1) Normal Operator - the person who runs the software \n(2)Maintenance operator - fixes the software \n(3) Operataional support - sells the services of the software, or puts it to the use of the business's customers"],

["In the onion model of stakeholder categorization, what 3 roles are in the middle layer?",
"(1) Functional beneficiary - customers of the business using the software at no cost to them \n(2) Purchaser - users of the software who pay for it \n(3) Interfacing System Owner - users or businesses that interface the customer-side aspects of the software with other software"],

["In the onion model of stakeholder categorization, name 3 potential roles in the outer layer",
"(1) The public \n(2) Regulators \n(3) Negative stakeholders - ie, a man-in-the-middle attacker trying to misue banking software"],

["How might you go about identifying stakeholders? Name three methods",
"(1) Ask your clients \n(2) Review existing documentation \n(3) exercises like the Onion Model"],

["What are surrogate stakeholders?",
"Intangible stakeholders - for example, you'll want to get your software cleared with legal, HR, DEI (lol) teams in your client business."],

["What are epics?",
"In agile development, epics are high-level requirements that must be broken down into smaller tasks. They take multiple sprints."],

["In agile development, there are three levels of requirements. A requirement at each level is broken down into several requirements from the level below. What are the levels?",
"(1) Initiatives, likely involving multipe teams - 'improve accessibility' \n(2) Epics, likely involving multiple sprints - 'Enhance visual accessibilty' \n(3) User Stories, involving a single sprint - 'As a dyslexic person, I want text in comic sans so I can read more easily"],

["What are user stories?",
"It's a template - 'as a <type of user> I want to <some goal> for <some reason>'. Each one has acceptance criteria."],

["What is the INVEST acronym for good user-stories?",
"I - independent; you can put them into sprits one at a time and implement them independently of each other \nN - negotiable; open to change and discussion \nV - valuable; delivers clear value to the user \nE - estimatable; you can estimate how much time/effort it will take \nS - small; you can do it in a single two-week sprint\nT - testable"],

["What four features should good user story acceptance crtieria have?",
"(1) easy to underestand and unambiguous \n(2) testable \n(3) measurable via a formal quantiative or qualitative method \n(4) Atomic, each criteria can be checked by itself"],

["What is the Moscow Method",
"A slightly warped acronym - Must have, could have, could have, won't have. It's a way of categorizing features of software you're developing, as part of agile development."]

]
}